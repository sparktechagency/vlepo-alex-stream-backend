import { StatusCodes } from "http-status-codes";
import sendResponse from "../../../shared/sendResponse";
import catchAsync from "../../../shared/catchAsync";
import { paymentServices } from "./payment.services";
import config from '../../../config';
import Stripe from 'stripe';
import { logger } from '../../../shared/logger';
import { Payment } from './payment.model';
import ApiError from '../../../errors/ApiError';
import { sendDataWithSocket } from '../../../helpers/socketHelper';
import { PAYMENT_STATUS } from './payment.constant';

const createPaymentIntent = catchAsync(async (req, res) => {
    const result = await paymentServices.createPaymentIntent(req.user,req.body);

    sendResponse(res, {
        success: true,
        statusCode: StatusCodes.OK,
        message: 'Payment intent created!',
        data: result,
    });
})


const verifyPayment = catchAsync(async (req, res) => {
    const { paymentIntentId } = req.body;
    const {email} = req.user;

    const result = await paymentServices.verifyPayment(paymentIntentId, email);

    sendResponse(res, {
        success: true,
        statusCode: StatusCodes.OK,
        message: 'Payment verified!',
        data: result,
    });
})

const getTransactionHistory = catchAsync(async (req, res) => {
    const { id } = req.user;

    const result = await paymentServices.getTransactionHistory(id);

    sendResponse(res, {
        success: true,  
        statusCode: StatusCodes.OK,
        message: 'Transaction history retrieved!',
        data: result,
    });
})



const webhooks = catchAsync(async (req, res) => {
    const sig = req.headers['stripe-signature'] as string;
    const endpointSecret = config.stripe_webhook_secret!;
    let event: Stripe.Event;

    try{
        event = Stripe.webhooks.constructEvent(req.body, sig, endpointSecret);
    }catch (err){
        const errorMessage = err instanceof Error ? err.message : 'Unknown error';
        logger.error(`Webhook signature verification failed: ${errorMessage}`); // Add detailed logging
        return res.status(400).send(`Webhook error: ${errorMessage}`);
    }


    try{
        switch (event.type){
            case 'checkout.session.completed': {
                //handle scenarios where a payment is successful
                const session = event.data.object as Stripe.Checkout.Session;

                const updatePayment = await  Payment.findOneAndUpdate({userId:session?.metadata?.userId, eventId: session?.metadata?.eventId}, {$set:{paymentStatus: PAYMENT_STATUS.PAID}}, {new: true});
                if(!updatePayment){
                    throw new ApiError(StatusCodes.BAD_REQUEST, 'Failed to update payment status');

                }

                //send data with socket.io
                await sendDataWithSocket('payment', updatePayment.userId as unknown as string, {title: 'Payment successful', message: 'Your payment was successful', type: 'success'});

                break;
            }

            case 'payment_intent.payment_failed': {
                const paymentIntent = event.data.object as Stripe.PaymentIntent;

                const updatePayment = await  Payment.findOneAndUpdate({userId:paymentIntent?.metadata?.userId, eventId: paymentIntent?.metadata?.eventId}, {$set:{paymentStatus: PAYMENT_STATUS.FAILED}}, {new: true});
                if(!updatePayment){
                    throw new ApiError(StatusCodes.BAD_REQUEST, 'Failed to update payment status');

                }
                break;
            }
            default: {
                logger.warn(`Unhandled event type: ${event.type}`);
            }
        }
    }catch (err){
        const errorMessage = err instanceof Error ? err.message : 'Unknown error';
        logger.error(`Error handling event: ${errorMessage}`);
        return res.status(500).send(`Server error: ${errorMessage}`);
    }
    res.status(200).send('Received');
})


export const paymentController = {
    createPaymentIntent,
    verifyPayment,
    getTransactionHistory,
    webhooks
    }